buildscript {
    ext.buildConfig = [
            'compileSdk': 28,
            'minSdk'    : 24,
            'targetSdk' : 28,
            'buildTools': '27.0.3',
            'version'   : [
                    'major': 0,
                    'minor': 0,
                    'patch': 0,
                    'build': 1,
            ],
    ]
    ext.buildConfig.version['name'] = "${buildConfig.version.major}.${buildConfig.version.minor}.${buildConfig.version.patch}"
    ext.buildConfig.version['code'] = buildConfig.version.major * 1000000 + buildConfig.version.minor * 10000 + buildConfig.version.patch * 100 + buildConfig.version.build

    ext.versions = [
            'supportLibrary'  : '26.1.0',
            'atsl'            : '1.0.1',
            'kotlin'          : '1.2.50',
            'kotlinCoroutines': '0.23.3',
            'okhttp'          : '3.10.0',
            'retrofit'        : '2.4.0',
            'dagger'          : '2.16',
            'moshi'           : '1.6.0',
            'lifecycle'       : '1.1.1'
    ]

    ext.deps = [
            'kotlin'  : [
                    'stdlib'    : [
                            'common': "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}",
                            'jdk'   : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
                            'js'    : "org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}",
                    ],
                    'test'      : [
                            'common'     : "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}",
                            'annotations': "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}",
                            'jdk'        : "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
                    ],
                    'coroutines': [
                            'common' : "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.kotlinCoroutines}",
                            'jdk'    : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}",
                            'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}",
                    ],
            ],
            'android' : [
                    'arch'   : [
                            'dbFramework': 'android.arch.persistence:db-framework:1.0.0',
                            'lifecycle'  : [
                                    'extensions': "android.arch.lifecycle:extensions:${versions.lifecycle}",
                                    'viewmodel' : "android.arch.lifecycle:viewmodel:${versions.lifecycle}",
                                    'runtime'   : "android.arch.lifecycle:runtime:${versions.lifecycle}",
                            ]
                    ],
                    'support': [
                            'annotations'     : "com.android.support:support-annotations:${versions.supportLibrary}",
                            'coreUtils'       : "com.android.support:support-core-utils:${versions.supportLibrary}",
                            'compat'          : "com.android.support:support-compat:${versions.supportLibrary}",
                            'recyclerView'    : "com.android.support:recyclerview-v7:${versions.supportLibrary}",
                            'customTabs'      : "com.android.support:customtabs:${versions.supportLibrary}",
                            'appCompat'       : "com.android.support:appcompat-v7:${versions.supportLibrary}",
                            'design'          : "com.android.support:design:${versions.supportLibrary}",
                            'constraintLayout': 'com.android.support.constraint:constraint-layout:1.1.2',
                    ],
                    'x'      : [
                            'coreKtx': 'androidx.core:core-ktx:0.3',
                    ],
                    'test'   : [
                            'runner': "com.android.support.test:runner:${versions.atsl}",
                            'rules' : "com.android.support.test:rules:${versions.atsl}",
                    ],

            ],
            'okhttp'  : [
                    'client'       : "com.squareup.okhttp3:okhttp:${versions.okhttp}",
                    'logging'      : "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
                    'mockWebServer': "com.squareup.okhttp3:mockwebserver:${versions.okhttp}",

            ],
            'retrofit': [
                    'client'                       : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
                    'converterKotlinxSerialization': 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.0.1',
                    'converterMoshi'               : "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
                    'coroutines'                   : "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0"
            ],
            'dagger'  : [
                    'runtime'        : "com.google.dagger:dagger:${versions.dagger}",
                    'compiler'       : "com.google.dagger:dagger-compiler:${versions.dagger}",
                    'androidRuntime' : "com.google.dagger:dagger-android:${versions.dagger}",
                    'androidCompiler': "com.google.dagger:dagger-android-processor:${versions.dagger}",
            ],
            'okio'    : 'com.squareup.okio:okio:1.14.0',
            'moshi'   : [
                    api   : "com.squareup.moshi:moshi:${versions.moshi}",
                    kotlin: "com.squareup.moshi:moshi-kotlin:${versions.moshi}",
                    ktGen : "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"
            ],

            'timber'  : 'com.jakewharton.timber:timber:5.0.0',
            'junit'   : 'junit:junit:4.12',
            'truth'   : 'com.google.truth:truth:0.40',

    ]

    ext.isCiBuild = System.getenv('CI') == 'true'

    repositories {
        mavenCentral()
        google()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0-beta02'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.2.0'
    }
}

apply plugin: 'org.jlleitschuh.gradle.ktlint'

allprojects {
    repositories {
        mavenCentral()
        google()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        jcenter()
    }

    // Force all of the primary support libraries to use the same version.
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == 'com.android.support') {
                    details.useVersion versions.supportLibrary
                }
            }
        }
    }


}

def gitSha() {
    def f = new File(buildDir, "commit-sha.txt")
    if (!f.exists()) {
        def p = 'git rev-parse HEAD'.execute([], project.rootDir)
        if (p.waitFor() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }
        f.parentFile.mkdirs()
        f.text = p.text.trim()
    }
    return f.text.trim()
}

def gitTimestamp() {
    def f = new File(buildDir, "commit-timestamp.txt")
    if (!f.exists()) {
        def p = 'git log -n 1 --format=%at'.execute([], rootDir)
        if (p.waitFor() != 0) {
            throw new RuntimeException(p.errorStream.text)
        }
        f.parentFile.mkdirs()
        f.text = p.text.trim()
    }
    return f.text.trim()
}

def propOrEmpty(String name) {
    return hasProperty(name) ? getProperty(name) : ''
}